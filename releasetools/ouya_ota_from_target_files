#!/usr/bin/env python
#
# Copyright (C) 2008 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import ouya_common as common

LOCAL_DIR = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
RELEASETOOLS_DIR = os.path.abspath(os.path.join(LOCAL_DIR, '../../../build/tools/releasetools'))

# Add releasetools directory to python path
sys.path.append(RELEASETOOLS_DIR)

# Import the existing file so we just have to rewrite the modules we need.
# This is a nasty hack as the filename doesn't end in .py, but it works
filename = os.path.join(RELEASETOOLS_DIR, "ota_from_target_files")
ota_from_target_files = common.load_module_from_file('ota_from_target_files', filename)

from ota_from_target_files import *
import ouya_edify_generator as edify_generator

__doc__ = ota_from_target_files.__doc__

def WriteFullOTAPackage(input_zip, output_zip):
  # TODO: how to determine this?  We don't know what version it will
  # be installed on top of.  For now, we expect the API just won't
  # change very often.
  script = edify_generator.EdifyGenerator(3, OPTIONS.info_dict)

  oem_props = OPTIONS.info_dict.get("oem_fingerprint_properties")
  recovery_mount_options = OPTIONS.info_dict.get("recovery_mount_options")
  oem_dict = None
  if oem_props is not None and len(oem_props) > 0:
    if OPTIONS.oem_source is None:
      raise common.ExternalError("OEM source required for this build")
    script.Mount("/oem", recovery_mount_options)
    oem_dict = common.LoadDictionaryFromLines(open(OPTIONS.oem_source).readlines())


  if OPTIONS.override_prop:
    metadata = {"post-timestamp": GetBuildProp("ro.build.date.utc",
                                               OPTIONS.info_dict),
                }
  else:
    metadata = {"post-build": CalculateFingerprint(
                                 oem_props, oem_dict, OPTIONS.info_dict),
                "pre-device": GetOemProperty("ro.product.device", oem_props, oem_dict,
                                           OPTIONS.info_dict),
                "post-timestamp": GetBuildProp("ro.build.date.utc",
                                             OPTIONS.info_dict),
                }

  device_specific = common.DeviceSpecificParams(
      input_zip=input_zip,
      input_version=OPTIONS.info_dict["recovery_api_version"],
      output_zip=output_zip,
      script=script,
      input_tmp=OPTIONS.input_tmp,
      metadata=metadata,
      info_dict=OPTIONS.info_dict)

  has_recovery_patch = HasRecoveryPatch(input_zip)
  block_based = True

  #if not OPTIONS.omit_prereq:
  #  ts = GetBuildProp("ro.build.date.utc", OPTIONS.info_dict)
  #  ts_text = GetBuildProp("ro.build.date", OPTIONS.info_dict)
  #  script.AssertOlderBuild(ts, ts_text)

  AppendAssertions(script, OPTIONS.info_dict, oem_dict)
  device_specific.FullOTA_Assertions()

  # Two-step package strategy (in chronological order, which is *not*
  # the order in which the generated script has things):
  #
  # if stage is not "2/3" or "3/3":
  #    write recovery image to boot partition
  #    set stage to "2/3"
  #    reboot to boot partition and restart recovery
  # else if stage is "2/3":
  #    write recovery image to recovery partition
  #    set stage to "3/3"
  #    reboot to recovery partition and restart recovery
  # else:
  #    (stage must be "3/3")
  #    set stage to ""
  #    do normal full package installation:
  #       wipe and install system, boot image, etc.
  #       set up system to update recovery partition on first boot
  #    complete script normally (allow recovery to mark itself finished and reboot)

# --- ouya safeboot start
#  recovery_img = common.GetBootableImage("recovery.img", "recovery.img",
#                                         OPTIONS.input_tmp, "RECOVERY")
# --- ouya safeboot end

  if OPTIONS.two_step:
    if not OPTIONS.info_dict.get("multistage_support", None):
      assert False, "two-step packages not supported by this build"
    fs = OPTIONS.info_dict["fstab"]["/misc"]
    assert fs.fs_type.upper() == "EMMC", \
        "two-step packages only supported on devices with EMMC /misc partitions"
    bcb_dev = {"bcb_dev": fs.device}
    common.ZipWriteStr(output_zip, "recovery.img", recovery_img.data)
    script.AppendExtra("""
if get_stage("%(bcb_dev)s") == "2/3" then
""" % bcb_dev)
    script.WriteRawImage("/recovery", "recovery.img")
    script.AppendExtra("""
set_stage("%(bcb_dev)s", "3/3");
reboot_now("%(bcb_dev)s", "recovery");
else if get_stage("%(bcb_dev)s") == "3/3" then
""" % bcb_dev)

  script.AppendExtra("ifelse(is_mounted(\"/system\"), unmount(\"/system\"));")
  device_specific.FullOTA_InstallBegin()

  if OPTIONS.backuptool:
    if block_based:
      common.ZipWriteStr(output_zip, "system/bin/backuptool.sh",
                     ""+input_zip.read("SYSTEM/bin/backuptool.sh"))
      common.ZipWriteStr(output_zip, "system/bin/backuptool.functions",
                     ""+input_zip.read("SYSTEM/bin/backuptool.functions"))
    script.Mount("/system")
    script.RunBackup("backup")
    script.Unmount("/system")

  system_progress = 0.75

  if OPTIONS.wipe_user_data:
    system_progress -= 0.1
  if HasVendorPartition(input_zip):
    system_progress -= 0.1

  if block_based:
    common.ZipWriteStr(output_zip, "system/bin/otasigcheck.sh",
                   ""+input_zip.read("SYSTEM/bin/otasigcheck.sh"))

  script.AppendExtra("if is_mounted(\"/data\") then")
  script.ValidateSignatures("data")
  script.AppendExtra("else")
  script.Mount("/data")
  script.ValidateSignatures("data")
  script.Unmount("/data")
  script.AppendExtra("endif;")

  if "selinux_fc" in OPTIONS.info_dict:
    WritePolicyConfig(OPTIONS.info_dict["selinux_fc"], output_zip)

  recovery_mount_options = OPTIONS.info_dict.get("recovery_mount_options")

  system_items = ItemSet("system", "META/filesystem_config.txt")
  script.ShowProgress(system_progress, 0)
  if block_based:
    # Full OTA is done as an "incremental" against an empty source
    # image.  This has the effect of writing new data from the package
    # to the entire partition, but lets us reuse the updater code that
    # writes incrementals to do it.
    system_tgt = GetImage("system", OPTIONS.input_tmp, OPTIONS.info_dict)
    system_tgt.ResetFileMap()
    system_diff = common.BlockDifference("system", system_tgt, src=None)
    system_diff.WriteScript(script, output_zip)
  else:
    script.FormatPartition("/system")
    script.Mount("/system", recovery_mount_options)
    if not has_recovery_patch:
      script.UnpackPackageDir("recovery", "/system")
    script.UnpackPackageDir("system", "/system")
    symlinks = CopyPartitionFiles(system_items, input_zip, output_zip)
    script.MakeSymlinks(symlinks)

# --- ouya safeboot start
#  boot_img = common.GetBootableImage("boot.img", "boot.img",
#                                     OPTIONS.input_tmp, "BOOT")
# --- ouya safeboot end

  if not block_based:
    def output_sink(fn, data):
      common.ZipWriteStr(output_zip, "recovery/" + fn, data)
      system_items.Get("system/" + fn, dir=False)

# --- ouya safeboot start
#    common.MakeRecoveryPatch(OPTIONS.input_tmp, output_sink,
#                             recovery_img, boot_img)
# --- ouya safeboot end

    system_items.GetMetadata(input_zip)
    system_items.Get("system").SetPermissions(script)

  if HasVendorPartition(input_zip):
    vendor_items = ItemSet("vendor", "META/vendor_filesystem_config.txt")
    script.ShowProgress(0.1, 0)

    if block_based:
      vendor_tgt = GetImage("vendor", OPTIONS.input_tmp, OPTIONS.info_dict)
      vendor_tgt.ResetFileMap()
      vendor_diff = common.BlockDifference("vendor", vendor_tgt)
      vendor_diff.WriteScript(script, output_zip)
    else:
      script.FormatPartition("/vendor")
      script.Mount("/vendor", recovery_mount_options)
      script.UnpackPackageDir("vendor", "/vendor")

      symlinks = CopyPartitionFiles(vendor_items, input_zip, output_zip)
      script.MakeSymlinks(symlinks)

      vendor_items.GetMetadata(input_zip)
      vendor_items.Get("vendor").SetPermissions(script)

# --- ouya safeboot start
#  common.CheckSize(boot_img.data, "boot.img", OPTIONS.info_dict)
#  common.ZipWriteStr(output_zip, "boot.img", boot_img.data)
# --- ouya safeboot end

  if block_based:
    script.Mount("/system")
  script.ValidateSignatures("cleanup")
  if block_based:
    script.Unmount("/system")

  device_specific.FullOTA_PostValidate()

  if OPTIONS.backuptool:
    script.ShowProgress(0.02, 10)
    if block_based:
      script.Mount("/system")
    script.RunBackup("restore")
    if block_based:
      script.Unmount("/system")

  script.ShowProgress(0.05, 5)
# --- ouya safeboot start
#  script.WriteRawImage("/boot", "boot.img")
  boot_img = open(OPTIONS.device_out + "/boot.img", "r")
  common.ZipWriteStr(output_zip, "boot.img", boot_img.read())
  boot_img.close()
  script.Mount("/system")
  script.UnpackPackageFile("boot.img", "/system/boot.img")
  script.Unmount("/system")
# --- ouya safeboot end

  script.ShowProgress(0.2, 10)
  device_specific.FullOTA_InstallEnd()

  if OPTIONS.extra_script is not None:
    script.AppendExtra(OPTIONS.extra_script)

  script.UnmountAll()

  if OPTIONS.wipe_user_data:
    script.ShowProgress(0.1, 10)
    script.FormatPartition("/data")

  if OPTIONS.two_step:
    script.AppendExtra("""
set_stage("%(bcb_dev)s", "");
""" % bcb_dev)
    script.AppendExtra("else\n")
    script.WriteRawImage("/boot", "recovery.img")
    script.AppendExtra("""
set_stage("%(bcb_dev)s", "2/3");
reboot_now("%(bcb_dev)s", "");
endif;
endif;
""" % bcb_dev)
  script.AddToZip(input_zip, output_zip, input_path=OPTIONS.updater_binary)
  WriteMetadata(metadata, output_zip)

  common.ZipWriteStr(output_zip, "system/build.prop",
                     ""+input_zip.read("SYSTEM/build.prop"))

  common.ZipWriteStr(output_zip, "META-INF/org/cyanogenmod/releasekey",
                     ""+input_zip.read("META/releasekey.txt"))

ota_from_target_files.WriteFullOTAPackage = WriteFullOTAPackage

def WriteIncrementalOTAPackage(target_zip, source_zip, output_zip):
    print "Incremental OTA Packages are not support on the hp tenderloin at this time"
    sys.exit(1)
ota_from_target_files.WriteIncrementalOTAPackage = WriteIncrementalOTAPackage

if __name__ == '__main__':
  try:
    # Ugly hacks are ugly
    OPTIONS.device_out = os.path.dirname(sys.argv[-1])
    main(sys.argv[1:])
  except common.ExternalError, e:
    print
    print "   ERROR: %s" % (e,)
    print
    sys.exit(1)
